<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">


	<!-- 开启通过注释进行事务配置 -->
	<context:annotation-config />
	<!-- 开启通过注释进行组件注入 -->
	<context:component-scan base-package="ningbo.media">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 加载属性文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<value>classpath:mail.properties</value>
			</list>
		</property>
	</bean>
	<!-- 
	<context:property-placeholder location="classpath:db.properties"
		ignore-unresolvable="true" />
	<context:property-placeholder location="classpath:mail.properties"
		ignore-unresolvable="true" />
 	-->
 	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<!-- ?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true -->
		<property name="url" value="jdbc:mysql://localhost:3306/db_search" />
		<property name="username" value="root" />
		<property name="password" value="searchningbo" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="300" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="10" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="5" />
		<!-- 自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
	</bean>

	<!-- 配置mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:sqlMapConfig.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<list>
				<value>classpath:ningbo/media/**/mapper/*-mapper.xml</value>
			</list>
		</property>
	</bean>

	<!-- 自动扫描mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- <property name="annotationClass" value="org.springframework.stereotype.Repository" 
			/> -->
		<property name="basePackage" value="ningbo.media.*.mapper" />
		<property name="markerInterface" value="ningbo.media.core.mapper.SqlMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<!-- 配置事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置注解实现管理事务（cglib：proxy-target-class="true"） -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="false" />

	<!-- JavaMail -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host">
			<value>${host}</value>
		</property>
		<property name="username">
			<value>${username}</value>
		</property>
		<property name="password">
			<value>${password}</value>
		</property>
		<property name="port">
			<value>${port}</value>
		</property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
				<prop key="mail.smtp.timeout">
					${mail.smtp.timeout}
				</prop>
				<prop key="mail.smtp.starttls.enable">
					${mail.smtp.starttls.enable}
				</prop>
				<prop key="mail.smtp.socketFactory.class">
					${mail.smtp.socketFactory.class}
				</prop>
				<prop key="mail.smtp.socketFactory.fallback">
					${mail.smtp.socketFactory.fallback}
				</prop>
			</props>
		</property>
	</bean>


</beans>