		if ((daysValue != null) && (daysValue.length() > 0)) {
					List<String> tmpList = StringUtil.getCustomDateString(
							daysValue, startDate, endDate);
					for (String str : tmpList) {
						EventDate ed = new EventDate();
						ed.setStartDate(str);
						ed.setEndDate(str);
						ed.setStartTime(startTime);
						ed.setEndTime(endTime);
						ed.setnEvents(event);
						eventDateService.save(ed);
					}
				} else {
					d = new EventDate();
					d.setStartDate(startDate);
					d.setEndDate(endDate);
					d.setStartTime(startTime);
					d.setEndTime(endTime);
					d.setnEvents(event);
					eventDateService.save(d);
				}
				




	if (RepeatType.WEEKS.getValue().equalsIgnoreCase(repeatType)) {
					d = new EventDate();
					d.setStartDate(startDate) ;
					d.setEndDate(endDate) ;
					d.setStartTime(startTime) ;
					d.setEndTime(endTime) ;
					d.setRepeatType(repeatType) ;
					
					
				} else if (RepeatType.DAYS.getValue().equalsIgnoreCase(
						repeatType)) {
					d = new EventDate();
					d.setStartDate(startDate);
					d.setEndDate(endDate);
					d.setStartTime(startTime);
					d.setEndTime(endTime);
					d.setnEvents(event);
					eventDateService.saveOrUpdate(d);
				} else if (RepeatType.CUSTOMS.getValue().equalsIgnoreCase(
						repeatType)) {
					d = new EventDate();
					d.setStartDate(startDate);
					d.setEndDate(endDate);
					d.setStartTime(startTime);
					d.setEndTime(endTime);
					d.setnEvents(event);
					d.setRepeatType(RepeatType.CUSTOMS.getValue());
					d.setRepeatValue(daysValue) ;
					eventDateService.saveOrUpdate(d);

				} else {
					logger.info("The programe would not run here forever.");
					json.put(Constant.MESSAGE,
							JSONCode.MSG_EVENT_SELECTED_REPEAT_TYPE);
					json.put(Constant.RESULT, JSONCode.RESULT_FAIL);
					return Response.ok(json.toString()).build();
				}